# Copyright 2024 DeepMind Technologies Limited.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A Concordia Environment Configuration."""

from collections.abc import Callable, Sequence
import concurrent.futures
import datetime
import random
import types

from concordia import components as generic_components
from concordia.associative_memory import associative_memory
from concordia.associative_memory import blank_memories
from concordia.associative_memory import formative_memories
from concordia.associative_memory import importance_function
from concordia.clocks import game_clock
from concordia.components import game_master as gm_components
from examples.modular.environment.modules import alchemy
from examples.modular.environment.modules import laudanum_and_mysticism_in_victorian_london
from concordia.factory.agent import basic_agent__main_role
from concordia.factory.agent import basic_agent__supporting_role
from concordia.factory.environment import basic_game_master
from concordia.language_model import language_model
from concordia.typing import scene as scene_lib
from concordia.utils import measurements as measurements_lib
import numpy as np
import sentence_transformers


Runnable = Callable[[], str]
ItemTypeConfig = gm_components.inventory.ItemTypeConfig

MAJOR_TIME_STEP = datetime.timedelta(minutes=30)
MINOR_TIME_STEP = datetime.timedelta(seconds=10)
SETUP_TIME = datetime.datetime(hour=20, year=1870, month=10, day=1)
START_TIME = datetime.datetime(hour=12, year=1870, month=10, day=2)

TIME_INCREMENT_BETWEEN_SCENES = datetime.timedelta(hours=12)

NUM_MAIN_PLAYERS = 2
NUM_SUPPORTING_PLAYERS = 2

NUM_BACKGROUND_WORLD_ELEMENTS = 7
NUM_MAIN_PLAYER_WORLD_ELEMENTS = 2
NUM_SUPPORTING_PLAYER_WORLD_ELEMENTS = 15
NUM_LAUDANUM_ADVERTISEMENTS = 2

SCENARIO_PREMISE = [('The year is 1870. The place is a bustling marketplace '
                     'near the docks in London.')]


WORLD_BUILDING_ELEMENTS = [
    *alchemy.ITEMS,
    *laudanum_and_mysticism_in_victorian_london.BACKGROUND_ITEMS,
]


def get_world_elements(size: int) -> list[str]:
  return random.sample(WORLD_BUILDING_ELEMENTS, size)


def get_laudanum_advertisements(size: int) -> list[str]:
  return random.sample(
      laudanum_and_mysticism_in_victorian_london.LAUDANUM_ADVERTISEMENTS, size)


def get_shared_memories_and_context(
    model: language_model.LanguageModel) -> tuple[Sequence[str], str]:
  """Return the shared memories and context for all agents and game master."""
  shared_memories = get_world_elements(NUM_BACKGROUND_WORLD_ELEMENTS)
  selected_laudanum_advertisements = get_laudanum_advertisements(
      NUM_LAUDANUM_ADVERTISEMENTS)

  today = 'Today\'s newspaper contains the following advertisement: '
  laudanum_today = [
      f'{today}{advert}' for advert in selected_laudanum_advertisements]
  shared_memories += laudanum_today

  # The shared context will be used for the NPC context. It reflects general
  # knowledge and is possessed by all characters.
  shared_context = model.sample_text(
      'Summarize the following passage in a concise and insightful fashion. It '
      'is OK to omit details that seem less important:\n'
      + 'The year is 1870. The place is London.\n'
      + '\nContext:\n'
      + '\n'.join(shared_memories)
      + '\n'
      + 'Summary:'
  )
  return shared_memories, shared_context


def configure_players() -> tuple[list[formative_memories.AgentConfig],
                                 list[formative_memories.AgentConfig],
                                 dict[str, formative_memories.AgentConfig]]:
  """Configure the players.

  Args:
  Returns:
    main_player_configs: configs for the main characters
    supporting_player_configs: configs for the supporting characters
    player_configs_dict: dict mapping player name to corresponding config
  """
  joined_main_player_knowledge = [
      ' '.join(get_world_elements(NUM_MAIN_PLAYER_WORLD_ELEMENTS))
      for _ in range(NUM_MAIN_PLAYERS)]
  supporting_player_knowledge = [
      get_world_elements(NUM_SUPPORTING_PLAYER_WORLD_ELEMENTS)
      for _ in range(NUM_SUPPORTING_PLAYERS)]
  joined_supporting_player_knowledge = [
      ' '.join(knowledge) for knowledge in supporting_player_knowledge]
  # These names were generated by Claude 3, prompted to produce names that
  # sound like they could belong to people mixed up in alchemy and opium in
  # London in the year 1870.
  player_configs = [
      # Main characters
      formative_memories.AgentConfig(
          name='Doctor Cornelius Ashmole',
          gender='male',
          date_of_birth=datetime.datetime(year=1820, month=4, day=28),
          goal='heal the sick and become famous',
          context=('Born in London, Cornelius aims to heal the sick and become '
                   'famous. He is also aware of the following: '
                   f'{joined_main_player_knowledge[0]}.'),
          traits='Personality: TBD',
          extras={
              'player_specific_memories': [
                  'Cornelius came to market today to buy some laudanum.',
              ],
              'main_character': True,
              'initial_endowment': {'coin': 100.0,
                                    'laudanum bottle': 0.0},
          }
      ),
      formative_memories.AgentConfig(
          name='Madame Esmeralda Dee',
          gender='female',
          goal='heal the sick and become famous',
          date_of_birth=datetime.datetime(year=1824, month=9, day=13),
          context=('Born in London, Esmeralda aims to heal the sick and become '
                   'famous. She is also aware of the following: '
                   f'{joined_main_player_knowledge[1]}.'),
          traits='Personality: TBD',
          extras={
              'player_specific_memories': [
                  'Esmeralda came to market today to buy some laudanum.',
              ],
              'main_character': True,
              'initial_endowment': {'coin': 100.0,
                                    'laudanum bottle': 0.0},
          }
      ),
      # Supporting characters
      formative_memories.AgentConfig(
          name='Professor Aldous Pendleton',
          gender='male',
          date_of_birth=datetime.datetime(year=1815, month=2, day=11),
          goal='accumulate as much money and fame as possible',
          context=('Born in London, Aldous has fallen on hard times of late '
                   'due to his morphinomania. As a result, he must sell some '
                   'of his most prized possessions. He is also aware of the '
                   'following '
                   f'information: {joined_supporting_player_knowledge[0]}'),
          traits='Personality: TBD',
          extras={
              'player_specific_memories': [
                  ('Aldous has fallen on hard times of late due to his '
                   'morphinomania. As a result, he must sell '
                   'some of his most prized possessions. He '
                   'came to market today to do just that.'),
                  *supporting_player_knowledge[0]
              ],
              'main_character': False,
              'initial_endowment': {'coin': 5.0,
                                    'laudanum bottle': 10.0},
          },
      ),
      formative_memories.AgentConfig(
          name='Molly "Poppy" Jennings',
          gender='female',
          date_of_birth=datetime.datetime(year=1845, month=5, day=5),
          goal='accumulate as much money and fame as possible',
          context=('Born in London, Molly has fallen on hard times of late '
                   'due to her morphinomania. As a result, she must sell some '
                   'of her most prized possessions. She is also aware of the '
                   'following '
                   f'information: {joined_supporting_player_knowledge[1]}'),
          traits='Personality: TBD',
          extras={
              'player_specific_memories': [
                  ('Molly has fallen on hard times of late due to her '
                   'morphinomania. As a result, she must sell '
                   'some of her most prized possessions. She '
                   'came to market today to do just that.'),
                  *supporting_player_knowledge[1]
              ],
              'main_character': False,
              'initial_endowment': {'coin': 5.0,
                                    'laudanum bottle': 10.0},
          },
      ),
  ]

  main_player_configs = [
      player for player in player_configs if player.extras['main_character']
  ]
  supporting_player_configs = [
      player for player in player_configs if not player.extras['main_character']
  ]
  player_configs_dict = {
      player.name: player for player in player_configs
  }

  return main_player_configs, supporting_player_configs, player_configs_dict


def configure_scenes(
    main_player_configs: Sequence[formative_memories.AgentConfig],
    supporting_player_configs: Sequence[formative_memories.AgentConfig],
) -> Sequence[scene_lib.SceneSpec]:
  """Configure the scene storyboard structure.

  Args:
    main_player_configs: configs for the main characters
    supporting_player_configs: configs for the supporting characters
  Returns:
    scenes: a sequence of scene specifications
  """

  player_configs = list(main_player_configs) + list(supporting_player_configs)

  # Both intros were written by Claude 3, prompted with the world context above.
  day_market_intro = (
      'The air was thick with the pungent aromas of exotic spices, the salty '
      'tang of the Thames, and the acrid smoke billowing from the nearby '
      'factories. The bustling marketplace by the London docks in 1870 was a '
      'cacophony of sounds—the shouts of hawkers peddling their wares, the '
      'cries of gulls circling overhead, and the creaking of ships\' rigging '
      'as they swayed in the breeze. Amidst the chaos, one could find all '
      'manner of goods, from the mundane to the mystical: barrels of salted '
      'fish, crates of fragrant teas, and hidden beneath the stalls, the '
      'whispered promises of opium and esoteric knowledge. It was here, in '
      'the shadows of the market, that the working-class seekers of '
      'alchemical truths and spiritual enlightenment gathered, their '
      'secrets guarded by the ever-present fog that rolled in from the river.'
  )
  night_market_intro = (
      'As the clock struck midnight, the once-bustling marketplace by the '
      'London docks in 1870 took on an eerie, otherworldly atmosphere. The '
      'fog, now thick and impenetrable, swirled lazily through the deserted '
      'stalls, muffling the distant sounds of the city and the lapping of the '
      'Thames against the shore. In the flickering light of the gas lamps, the '
      'shadows seemed to dance and twist, taking on a life of their own. It '
      'was at this hour that the seekers of opium\'s secrets emerged from '
      'the darkness, their hushed whispers and furtive glances betraying their '
      'illicit purpose. They moved like ghosts through the market, their '
      'footsteps echoing on the cobblestones as they navigated the '
      'labyrinthine alleys and hidden corners, seeking out the opium dens and '
      'secret gatherings where alchemical knowledge and spiritual '
      'enlightenment could be found. In this twilight realm, the line between '
      'reality and dreams blurred, and the marketplace became a portal to a '
      'world where the impossible seemed within reach, and the secrets of the '
      'universe were whispered in the smoke-filled air.'
  )

  scene_specs = {
      'day': scene_lib.SceneTypeSpec(
          name='day',
          premise={cfg.name: [day_market_intro] for cfg in player_configs},
      ),
      'night': scene_lib.SceneTypeSpec(
          name='night',
          premise={cfg.name: [night_market_intro] for cfg in player_configs},
      ),
  }

  scenes = [
      scene_lib.SceneSpec(
          scene_type=scene_specs['day'],
          start_time=START_TIME + 0 * TIME_INCREMENT_BETWEEN_SCENES,
          participant_configs=player_configs,
          num_rounds=1,
      ),
      scene_lib.SceneSpec(
          scene_type=scene_specs['night'],
          start_time=START_TIME + 1 * TIME_INCREMENT_BETWEEN_SCENES,
          participant_configs=player_configs,
          num_rounds=1,
      ),
      scene_lib.SceneSpec(
          scene_type=scene_specs['day'],
          start_time=START_TIME + 2 * TIME_INCREMENT_BETWEEN_SCENES,
          participant_configs=player_configs,
          num_rounds=1,
      ),
      scene_lib.SceneSpec(
          scene_type=scene_specs['night'],
          start_time=START_TIME + 2 * TIME_INCREMENT_BETWEEN_SCENES,
          participant_configs=player_configs,
          num_rounds=1,
      ),
  ]
  return scenes


def get_inventories_component(
    model: language_model.LanguageModel,
    memory: associative_memory.AssociativeMemory,
    player_configs: Sequence[formative_memories.AgentConfig],
    clock_now: Callable[[], datetime.datetime] = datetime.datetime.now,
):
  """Get the inventory tracking component for the game master."""
  money_config = ItemTypeConfig(name='coin')
  laudanum_config = ItemTypeConfig(
      name='laudanum bottle', minimum=0, maximum=np.inf)
  player_initial_endowments = {
      config.name: config.extras['initial_endowment']
      for config in player_configs}
  inventories = gm_components.inventory.Inventory(
      model=model,
      memory=memory,
      item_type_configs=[money_config, laudanum_config],
      player_initial_endowments=player_initial_endowments,
      clock_now=clock_now,
      financial=True,
      name='possessions',
      verbose=True,
  )
  return inventories


class Simulation(Runnable):
  """Define the simulation API object for the launch script to interact with."""

  def __init__(
      self,
      model: language_model.LanguageModel,
      embedder: sentence_transformers.SentenceTransformer,
      measurements: measurements_lib.Measurements,
      agent_module: types.ModuleType = basic_agent__main_role,
  ):
    """Initialize the simulation object.

    The launch script assumes this API object has a run() method.

    Args:
      model: the language model to use.
      embedder: the sentence transformer to use.
      measurements: the measurements object to use.
      agent_module: the agent module to use for all main characters.
    """
    self._agent_module = agent_module
    self._model = model
    self._embedder = embedder
    self._measurements = measurements

    self._clock = game_clock.MultiIntervalClock(
        start=SETUP_TIME,
        step_sizes=[MAJOR_TIME_STEP, MINOR_TIME_STEP])

    importance_model = importance_function.AgentImportanceModel(self._model)
    importance_model_gm = importance_function.ConstantImportanceModel()
    blank_memory_factory = blank_memories.MemoryFactory(
        model=self._model,
        embedder=self._embedder,
        importance=importance_model.importance,
        clock_now=self._clock.now,
    )
    shared_memories, shared_context = get_shared_memories_and_context(model)
    formative_memory_factory = formative_memories.FormativeMemoryFactory(
        model=self._model,
        shared_memories=shared_memories,
        blank_memory_factory_call=blank_memory_factory.make_blank_memory,
        current_date=SETUP_TIME,
    )

    custom_agent_components = None

    main_player_configs, supporting_player_configs, player_configs_dict = (
        configure_players()
    )
    all_player_names = list(player_configs_dict.keys())
    supporting_player_names = [cfg.name for cfg in supporting_player_configs]

    num_main_players = len(main_player_configs)
    num_supporting_players = len(supporting_player_configs)

    self._all_memories = {}

    main_players = []
    with concurrent.futures.ThreadPoolExecutor(
        max_workers=num_main_players) as pool:
      for agent, mem in pool.map(
          self._agent_module.build_agent,
          # All players get a reference to the same language model.
          [self._model] * num_main_players,
          # All players get a reference to the same clock.
          [self._clock] * num_main_players,
          # All players have the same time increment.
          [MAJOR_TIME_STEP] * num_main_players,
          # Each player gets a blank memory factory.
          [blank_memory_factory] * num_main_players,
          # player gets a formative memory factory.
          [formative_memory_factory] * num_main_players,
          # One specific player config per player.
          main_player_configs,
          # All players get the same list of `all_player_names`.
          [all_player_names] * num_main_players,
          # All players get the same custom components.
          [custom_agent_components] * num_main_players,
          # All players get the same `measurements` logging object.
          [self._measurements] * num_main_players,
      ):
        main_players.append(agent)
        self._all_memories[agent.name] = mem

    supporting_players = []
    if num_supporting_players > 0:
      with concurrent.futures.ThreadPoolExecutor(
          max_workers=num_supporting_players) as pool:
        for agent, mem in pool.map(
            basic_agent__supporting_role.build_agent,
            # All players get a reference to the same language model.
            [self._model] * num_supporting_players,
            # All players get a reference to the same clock.
            [self._clock] * num_supporting_players,
            # All players have the same time increment.
            [MAJOR_TIME_STEP] * num_supporting_players,
            # Each player gets a blank memory factory.
            [blank_memory_factory] * num_supporting_players,
            # player gets a formative memory factory.
            [formative_memory_factory] * num_supporting_players,
            # One specific player config per player.
            supporting_player_configs,
            # All players get the same list of `all_player_names`.
            [all_player_names] * num_supporting_players,
            # All players get the same custom components.
            [custom_agent_components] * num_supporting_players,
            # All players get the same `measurements` logging object.
            [self._measurements] * num_supporting_players,
        ):
          supporting_players.append(agent)
          self._all_memories[agent.name] = mem

    self._all_players = main_players + supporting_players

    game_master_memory = associative_memory.AssociativeMemory(
        sentence_embedder=self._embedder,
        importance=importance_model_gm.importance,
        clock=self._clock.now)

    magic_is_not_real = generic_components.constant.ConstantComponent(
        state='Magic is not real. Superatural events are impossible.',
        name='Important Fact')
    only_named_characters_sell = generic_components.constant.ConstantComponent(
        state=('The only people in London with laudanum to sell today are ' +
               ' and '.join(supporting_player_names) + '.'),
        name='Fact')
    inventories = get_inventories_component(
        model=model,
        memory=game_master_memory,
        player_configs=main_player_configs + supporting_player_configs,
        clock_now=self._clock.now
    )
    additional_gm_components = [
        magic_is_not_real,
        only_named_characters_sell,
        inventories,
    ]

    self._primary_environment, self._game_master_memory = (
        basic_game_master.build_game_master(
            model=self._model,
            embedder=self._embedder,
            importance_model=importance_model_gm,
            clock=self._clock,
            players=self._all_players,
            shared_memories=shared_memories,
            shared_context=shared_context,
            blank_memory_factory=blank_memory_factory,
            memory=game_master_memory,
            cap_nonplayer_characters_in_conversation=2,
            additional_components=additional_gm_components,
        )
    )
    self._scenes = configure_scenes(
        main_player_configs=main_player_configs,
        supporting_player_configs=supporting_player_configs,
    )

    self._secondary_environments = []

    self._init_player_memories(
        setup_time=SETUP_TIME,
        main_player_configs=main_player_configs,
        supporting_player_configs=supporting_player_configs,
        shared_memories=shared_memories,
        scenario_premise=SCENARIO_PREMISE,
    )

  def _init_player_memories(
      self,
      setup_time: datetime.datetime,
      main_player_configs: list[formative_memories.AgentConfig],
      supporting_player_configs: list[formative_memories.AgentConfig],
      shared_memories: Sequence[str],
      scenario_premise: Sequence[str],
  ) -> None:
    """Initialize player memories.

    Args:
      setup_time: the time to set the clock to before initializing memories
      main_player_configs: configs for the main characters
      supporting_player_configs: configs for the supporting characters
      shared_memories: memories shared by all players, the game master, and NPCs
      scenario_premise: premise observation shared by all players and the game
        master.
    """
    player_configs = main_player_configs + supporting_player_configs
    self._clock.set(setup_time)

    for premise in scenario_premise:
      self._game_master_memory.add(premise)
      for player in self._all_players:
        player.observe(premise)

    for shared_memory in shared_memories:
      self._game_master_memory.add(shared_memory)
      for player in self._all_players:
        player.observe(shared_memory)

    for player_config in player_configs:
      extra_memories = player_config.extras['player_specific_memories']
      for extra_memory in extra_memories:
        self._game_master_memory.add(extra_memory)

  def __call__(self) -> str:
    """Run the simulation.

    Returns:
      html_results_log: browseable log of the simulation in HTML format
    """
    html_results_log = basic_game_master.run_simulation(
        model=self._model,
        players=self._all_players,
        primary_environment=self._primary_environment,
        secondary_environments=self._secondary_environments,
        clock=self._clock,
        scenes=self._scenes,
    )
    return html_results_log
